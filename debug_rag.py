#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ RAG —Ñ—É–Ω–∫—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏
"""
import sys
import os
sys.path.append('/Users/Viachaslau_Kazakou/Work/AI-forum')

from app.ai_manager.forum_manager import ForumManager
from app.utils.logger_utils import setup_logger
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = setup_logger(__name__, level=logging.DEBUG)

def test_character_docs():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    
    try:
        # –°–æ–∑–¥–∞–µ–º ForumManager
        logger.info("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ ForumManager...")
        manager = ForumManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        characters = manager.forum_rag.get_available_characters()
        logger.info(f"üë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: {characters}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        test_query = "–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏?"
        
        for character in characters:
            logger.info(f"\nüé≠ === –¢–ï–°–¢ –î–õ–Ø –ü–ï–†–°–û–ù–ê–ñ–ê: {character} ===")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            docs = manager.forum_rag.get_character_relevant_docs(test_query, character, top_k=5)
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {character}: –Ω–∞–π–¥–µ–Ω–æ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –Ω—É–∂–Ω–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É
            correct_docs = 0
            wrong_docs = 0
            
            for i, doc in enumerate(docs):
                doc_character = doc.get('character', 'unknown').lower()
                target_character = character.lower()
                
                if doc_character == target_character:
                    correct_docs += 1
                    logger.debug(f"   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {i+1}: –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø–µ—Ä—Å–æ–Ω–∞–∂ '{doc_character}'")
                else:
                    wrong_docs += 1
                    logger.warning(f"   ‚ùå –î–æ–∫—É–º–µ–Ω—Ç {i+1}: –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –ø–µ—Ä—Å–æ–Ω–∞–∂ '{doc_character}' (–æ–∂–∏–¥–∞–ª—Å—è '{target_character}')")
                
                logger.debug(f"      –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {doc.get('content', '')[:100]}...")
                logger.debug(f"      Similarity: {doc.get('similarity_score', 0):.4f}")
            
            logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {character}: {correct_docs} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö, {wrong_docs} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö")
            
            if wrong_docs > 0:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è {character}!")
            else:
                logger.info(f"‚úÖ –í–°–ï –î–û–ö–£–ú–ï–ù–¢–´ –ö–û–†–†–ï–ö–¢–ù–´ –¥–ª—è {character}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

def test_character_stats():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    logger.info("\nüìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–°–û–ù–ê–ñ–ï–ô ===")
    
    try:
        manager = ForumManager()
        stats = manager.forum_rag.get_character_stats()
        
        logger.info(f"üìà –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –±–∞–∑–µ: {len(stats)}")
        
        for character, info in stats.items():
            logger.info(f"üë§ {character}:")
            logger.info(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–π: {info['count']}")
            logger.info(f"   üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {info['moods']}")
            logger.info(f"   üè∑Ô∏è –¢–∏–ø—ã: {info['types']}")
            logger.info(f"   üìç –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã: {info['contexts']}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def test_direct_query():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É"""
    logger.info("\nüéØ === –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û –ó–ê–ü–†–û–°–ê ===")
    
    try:
        manager = ForumManager()
        
        test_cases = [
            ("alaev", "–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö?"),
            ("Sly32", "–ö–∞–∫ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–¥–æ–º?"),
            ("Domen77", "–¢–≤–æ–µ –º–Ω–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö?")
        ]
        
        for character, question in test_cases:
            logger.info(f"\nüé≠ –ó–∞–ø—Ä–æ—Å –∫ {character}: {question}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            response = manager.ask_as_character(question, character, mood="sarcastic")
            
            logger.info(f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç {character}: {response[:200]}...")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_character_docs()
    test_character_stats()
    test_direct_query()
    
    logger.info("üèÅ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
