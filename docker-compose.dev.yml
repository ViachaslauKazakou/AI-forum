services:
  
  # Используем те же сервисы, что и в основном docker-compose
  forum_app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: forum_app_debug
    ports:
      - "8000:8000"    # Debug приложение на порту 8000
      - "5678:5678"    # Порт для debugpy
    env_file:
      - .env
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    networks:
      - ai_network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    # Добавляем extra_hosts для Linux систем
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: ["python", "-Xfrozen_modules=off", "-m", "debugpy", "--listen", "0.0.0.0:5678", "--wait-for-client", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]


  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai_network
    restart: unless-stopped

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery_worker
    command: python -m celery -A app.celery_config worker -l info --concurrency=2 -Q ai_forum_queue
    env_file:
      - .env
    volumes:
      - ./app:/app/app
    networks:
      - ai_network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flower
    command: python -m celery -A app.celery_config flower --port=5555
    ports:
      - "5555:5555"
    env_file:
      - .env
    volumes:
      - ./app:/app/app
    networks:
      - ai_network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

networks:
  # Используем ту же сеть
  ai_network:
    # external: true
    driver: bridge
