version: '3.8'

services:
  # API Gateway
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - forum
      - ai_manager
      - rag_manager
    networks:
      - ai_network

  # Основной форум
  forum:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: forum_app
    environment:
      - DATABASE_URL=postgresql+asyncpg://docker:docker@postgres:5432/postgres
      - REDIS_URL=redis://redis:6379
      - RAG_MANAGER_URL=http://rag_manager:8003
      - AI_MANAGER_URL=http://ai_manager:8002
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    networks:
      - ai_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    # RAG Manager Service
  rag-manager:
    build: 
      context: ./rag_manager
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_forum
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-forum-network
    volumes:
      - ./rag_manager/forum_knowledge_base:/app/forum_knowledge_base:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Manager Service
  ai_manager:
    build:
      context: .
      dockerfile: ai_manager/Dockerfile
    container_name: ai_manager
    ports:
      - "8002:8080"
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_PORT=11434
      - REDIS_URL=redis://redis:6379
    volumes:
      - ollama_models:/app/ollama/models
      - ./ai_manager/logs:/app/logs
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '4'
    depends_on:
      redis:
        condition: service_healthy

  # RAG Manager
  rag_manager:
    build:
      context: .
      dockerfile: rag_manager/Dockerfile
    container_name: rag_manager
    ports:
      - "8003:8080"
    environment:
      - DATABASE_URL=postgresql+asyncpg://docker:docker@postgres:5432/postgres
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER=redis://redis:6379/1
      - AI_MANAGER_URL=http://ai_manager:8002
    volumes:
      - ./rag_manager:/app
      - ./logs:/app/logs
    networks:
      - ai_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Workers для RAG
  rag_worker:
    build:
      context: .
      dockerfile: rag_manager/Dockerfile
    command: celery -A app.tasks worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=postgresql+asyncpg://docker:docker@postgres:5432/postgres
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER=redis://redis:6379/1
    volumes:
      - ./rag_manager:/app
    networks:
      - ai_network
    depends_on:
      - redis
      - postgres
    deploy:
      replicas: 2

  # PostgreSQL с pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: forum_postgres
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=docker
      - POSTGRES_PASSWORD=docker
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-pgvector.sql:/docker-entrypoint-initdb.d/init-pgvector.sql
    networks:
      - ai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docker -d postgres"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Redis для кэширования и очередей
  redis:
    image: redis:7-alpine
    container_name: forum_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Monitoring
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ai_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - ai_network
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_models:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
